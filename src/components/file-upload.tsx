import { useCallback, useEffect, useMemo, useRef, useState } from "react";import { CheckCircle2, FileText, Loader2, Upload, X } from "lucide-react";import { nanoid } from "nanoid";import { Button } from "@/components/ui/button";import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";import { Input } from "@/components/ui/input";import { Label } from "@/components/ui/label";import { Progress } from "@/components/ui/progress";import { cn } from "@/lib/utils";type UploadStatus = "idle" | "uploading" | "success" | "error";interface UploadEntry {  id: string;  file: File;  progress: number;  status: UploadStatus;}const MAX_FILE_SIZE = 25 * 1024 * 1024;const ACCEPTED_TYPES = [  "application/pdf",  "application/vnd.openxmlformats-officedocument.wordprocessingml.document",  "image/png",];const formatBytes = (bytes: number) => {  if (!bytes) return "0 B";  const units = ["B", "KB", "MB", "GB"];  const power = Math.min(Math.floor(Math.log(bytes) / Math.log(1024)), units.length - 1);  const size = (bytes / Math.pow(1024, power)).toFixed(1);  return `${size} ${units[power]}`;};export function FileUpload() {  const [entries, setEntries] = useState<UploadEntry[]>([]);  const inputRef = useRef<HTMLInputElement | null>(null);  const timersRef = useRef<Record<string, number>>({});  useEffect(() => {    const timers = timersRef.current;    return () => {      Object.values(timers).forEach((timerId) => clearInterval(timerId));    };  }, []);  const handleFiles = useCallback((fileList: FileList | null) => {    if (!fileList?.length) return;    const incoming = Array.from(fileList).filter((file) => {      const typeAccepted = ACCEPTED_TYPES.includes(file.type);      const sizeAccepted = file.size <= MAX_FILE_SIZE;      return typeAccepted && sizeAccepted;    });    if (!incoming.length) return;    setEntries((prev) => [      ...prev,      ...incoming.map((file) => ({        id: nanoid(),        file,        progress: 0,        status: "idle" as UploadStatus,      })),    ]);  }, []);  const onDrop = useCallback(    (event: React.DragEvent<HTMLLabelElement>) => {      event.preventDefault();      event.stopPropagation();      handleFiles(event.dataTransfer.files);    },    [handleFiles],  );  const startUpload = useCallback(() => {    const queued = entries.filter((entry) => entry.status === "idle");    if (!queued.length) return;    setEntries((prev) =>      prev.map((entry) =>        entry.status === "idle"          ? { ...entry, status: "uploading", progress: Math.max(entry.progress, 5) }          : entry,      ),    );    queued.forEach((entry) => {      if (timersRef.current[entry.id]) return;      const timerId = window.setInterval(() => {        setEntries((prev) =>          prev.map((current) => {            if (current.id !== entry.id) return current;            if (current.status !== "uploading") return current;            const increment = Math.random() * 25;            const nextProgress = Math.min(current.progress + increment, 100);            const nextStatus = nextProgress >= 100 ? "success" : "uploading";            if (nextStatus === "success") {              const activeTimer = timersRef.current[entry.id];              if (activeTimer) {                clearInterval(activeTimer);                delete timersRef.current[entry.id];              }            }            return {              ...current,              progress: nextProgress,              status: nextStatus,            };          }),        );      }, 350);      timersRef.current[entry.id] = timerId;    });  }, [entries]);  const hasQueued = entries.some((entry) => entry.status === "idle");  const dropZoneLabel = useMemo(() => {    if (!entries.length) return "Drop notarization files here";    if (hasQueued) return "Add more files or start upload";    return "Upload complete";  }, [entries.length, hasQueued]);  const clearEntry = useCallback((id: string) => {    const timerId = timersRef.current[id];    if (timerId) {      clearInterval(timerId);      delete timersRef.current[id];    }    setEntries((prev) => prev.filter((entry) => entry.id !== id));  }, []);  const clearAll = useCallback(() => {    Object.values(timersRef.current).forEach((timerId) => clearInterval(timerId));    Object.keys(timersRef.current).forEach((key) => delete timersRef.current[key]);    setEntries([]);  }, []);  return (    <Card className="w-full max-w-2xl">      <CardHeader className="text-center">        <CardTitle className="text-2xl">Drag and Drop Your File</CardTitle>        <CardDescription>          Upload notarization documents securely. Or browse to choose a file manually.        </CardDescription>      </CardHeader>      <CardContent className="space-y-6">        <Label          htmlFor="file-input"          onDragOver={(event) => event.preventDefault()}          onDragEnter={(event) => event.preventDefault()}          onDrop={onDrop}          className={cn(            "flex min-h-[210px] cursor-pointer flex-col items-center justify-center gap-4 rounded-lg border-2 border-dashed border-muted-foreground/40 bg-muted/40 px-6 py-10 text-center transition-colors",            entries.length ? "hover:border-primary/60" : "hover:border-primary/80 hover:bg-muted/60",          )}        >          <Upload className="h-10 w-10 text-muted-foreground" />          <div>            <p className="text-lg font-semibold">{dropZoneLabel}</p>            <p className="text-sm text-muted-foreground">              Supported types: PDF, DOCX, PNG. Maximum size 25 MB each.            </p>          </div>          <Button            type="button"            variant="secondary"            onClick={(event) => {              event.preventDefault();              inputRef.current?.click();            }}          >            Browse files          </Button>        </Label>        <Input          ref={inputRef}          id="file-input"          type="file"          multiple          accept={ACCEPTED_TYPES.join(",")}          className="hidden"          onChange={(event) => handleFiles(event.target.files)}        />        {!!entries.length && (          <div className="space-y-3">            <div className="flex flex-wrap items-center justify-between gap-2">              <p className="text-sm font-medium text-muted-foreground">                {entries.length} file{entries.length > 1 ? "s" : ""} ready              </p>              <div className="flex items-center gap-2">                <Button variant="outline" size="sm" onClick={clearAll}>                  Clear all                </Button>                <Button size="sm" onClick={startUpload} disabled={!hasQueued}>                  Start upload                </Button>              </div>            </div>            <ul className="space-y-2">              {entries.map((entry) => (                <li key={entry.id} className="flex items-start gap-3 rounded-md border bg-card/60 p-3">                  <div className="mt-1 rounded-md bg-primary/10 p-2">                    <FileText className="h-4 w-4 text-primary" />                  </div>                  <div className="flex-1 space-y-2">                    <div className="flex flex-wrap items-center justify-between gap-2">                      <div>                        <p className="text-sm font-medium">{entry.file.name}</p>                        <p className="text-xs text-muted-foreground">{formatBytes(entry.file.size)}</p>                      </div>                      <div className="flex items-center gap-1 text-xs">                        {entry.status === "uploading" && (                          <>                            <Loader2 className="h-3.5 w-3.5 animate-spin text-primary" />                            <span className="font-medium text-primary">Uploading...</span>                          </>                        )}                        {entry.status === "success" && (                          <>                            <CheckCircle2 className="h-3.5 w-3.5 text-green-500" />                            <span className="font-medium text-green-600">Done</span>                          </>                        )}                      </div>                    </div>                    <Progress value={entry.progress} />                  </div>                  <Button                    variant="ghost"                    size="icon"                    className="mt-1 h-8 w-8 text-muted-foreground hover:text-destructive"                    onClick={() => clearEntry(entry.id)}                  >                    <X className="h-4 w-4" />                  </Button>                </li>              ))}            </ul>          </div>        )}      </CardContent>    </Card>  );}